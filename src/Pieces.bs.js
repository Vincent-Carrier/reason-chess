// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Base$ReasonChess = require("./Base.bs.js");
var Movement$ReasonChess = require("./Movement.bs.js");

function four_ways(v, fn) {
  return List.flatten(List.map(Curry.__1(fn), Movement$ReasonChess.four_directions(v)));
}

function moves(piece, board) {
  return four_ways(/* tuple */[
              1,
              1
            ], (function (param) {
                var param$1 = param;
                var param$2 = board;
                var param$3 = undefined;
                var param$4 = undefined;
                var param$5 = /* () */0;
                return Movement$ReasonChess.slide(piece, param$1, param$2, param$3, param$4, param$5);
              }));
}

var Bishop = {
  moves: moves
};

function moves$1(piece, board) {
  return four_ways(/* tuple */[
              0,
              1
            ], (function (param) {
                var param$1 = param;
                var param$2 = board;
                var param$3 = undefined;
                var param$4 = undefined;
                var param$5 = /* () */0;
                return Movement$ReasonChess.slide(piece, param$1, param$2, param$3, param$4, param$5);
              }));
}

var Rook = {
  moves: moves$1
};

function moves$2(p, b) {
  return Pervasives.$at(moves(p, b), moves$1(p, b));
}

var Queen = {
  moves: moves$2
};

function moves$3(p, b) {
  var diagonal = four_ways(/* tuple */[
        1,
        1
      ], (function (param) {
          var param$1 = param;
          var param$2 = b;
          var param$3 = undefined;
          var param$4 = 1;
          var param$5 = /* () */0;
          return Movement$ReasonChess.slide(p, param$1, param$2, param$3, param$4, param$5);
        }));
  var lateral = four_ways(/* tuple */[
        0,
        1
      ], (function (param) {
          var param$1 = param;
          var param$2 = b;
          var param$3 = undefined;
          var param$4 = 1;
          var param$5 = /* () */0;
          return Movement$ReasonChess.slide(p, param$1, param$2, param$3, param$4, param$5);
        }));
  return Pervasives.$at(diagonal, lateral);
}

var King = {
  moves: moves$3
};

function moves$4(p, b) {
  var lShape = four_ways(/* tuple */[
        1,
        2
      ], (function (param) {
          var param$1 = param;
          var param$2 = b;
          var param$3 = undefined;
          var param$4 = 1;
          var param$5 = /* () */0;
          return Movement$ReasonChess.slide(p, param$1, param$2, param$3, param$4, param$5);
        }));
  var flippedL = four_ways(/* tuple */[
        2,
        1
      ], (function (param) {
          var param$1 = param;
          var param$2 = b;
          var param$3 = undefined;
          var param$4 = 1;
          var param$5 = /* () */0;
          return Movement$ReasonChess.slide(p, param$1, param$2, param$3, param$4, param$5);
        }));
  return Pervasives.$at(lShape, flippedL);
}

var Knight = {
  moves: moves$4
};

function moves$5(p, b) {
  var fwd = Base$ReasonChess.Color.forward(p.color);
  var straight = /* tuple */[
    0,
    fwd
  ];
  var match = p.sq[1] === Base$ReasonChess.Color.pawnRow(p.color);
  var range = match ? 2 : 1;
  var straightMoves = Movement$ReasonChess.slide(p, straight, b, false, range, /* () */0);
  var captures = List.flatten(List.map((function (n) {
              return Movement$ReasonChess.slide(p, /* tuple */[
                          n,
                          fwd
                        ], b, undefined, 1, /* () */0);
            }), /* :: */[
            -1,
            /* :: */[
              1,
              /* [] */0
            ]
          ]));
  return Pervasives.$at(straightMoves, captures);
}

var Pawn = {
  moves: moves$5
};

exports.four_ways = four_ways;
exports.Bishop = Bishop;
exports.Rook = Rook;
exports.Queen = Queen;
exports.King = King;
exports.Knight = Knight;
exports.Pawn = Pawn;
/* Movement-ReasonChess Not a pure module */
